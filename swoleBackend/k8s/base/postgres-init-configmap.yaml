apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: swole
  labels:
    app.kubernetes.io/name: swole
    app.kubernetes.io/component: postgres
data:
  init.sql: |
    -- Swole Fitness App Database Schema
    -- This creates all necessary tables for the workout application

    -- Users table
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        email VARCHAR(255) UNIQUE NOT NULL,
        name VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Routines table
    CREATE TABLE IF NOT EXISTS routines (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        name VARCHAR(255) NOT NULL,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Workouts table (individual exercises within routines)
    CREATE TABLE IF NOT EXISTS workouts (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        routine_id UUID NOT NULL REFERENCES routines(id) ON DELETE CASCADE,
        name VARCHAR(255) NOT NULL,
        type VARCHAR(50),
        exercise_type VARCHAR(50) NOT NULL,
        weight DECIMAL(10,2),
        time INTEGER,
        reps INTEGER,
        sets INTEGER,
        description TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );

    -- Week schedules table
    CREATE TABLE IF NOT EXISTS week_schedules (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        week_start DATE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, week_start)
    );

    -- Day schedules table
    CREATE TABLE IF NOT EXISTS day_schedules (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        week_id UUID NOT NULL REFERENCES week_schedules(id) ON DELETE CASCADE,
        day VARCHAR(20) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(week_id, day)
    );

    -- Day routines junction table (many-to-many relationship)
    CREATE TABLE IF NOT EXISTS day_routines (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        day_id UUID NOT NULL REFERENCES day_schedules(id) ON DELETE CASCADE,
        routine_id UUID NOT NULL REFERENCES routines(id) ON DELETE CASCADE,
        position INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(day_id, routine_id)
    );

    -- User progress table for tracking workout completion and improvements
    CREATE TABLE IF NOT EXISTS user_progress (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
        workout_id UUID NOT NULL REFERENCES workouts(id) ON DELETE CASCADE,
        weight DECIMAL(10,2),
        time INTEGER,
        date DATE NOT NULL DEFAULT CURRENT_DATE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UNIQUE(user_id, workout_id, date)
    );

    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_workouts_routine_id ON workouts(routine_id);
    CREATE INDEX IF NOT EXISTS idx_week_schedules_user_id ON week_schedules(user_id);
    CREATE INDEX IF NOT EXISTS idx_day_schedules_week_id ON day_schedules(week_id);
    CREATE INDEX IF NOT EXISTS idx_day_routines_day_id ON day_routines(day_id);
    CREATE INDEX IF NOT EXISTS idx_day_routines_routine_id ON day_routines(routine_id);
    CREATE INDEX IF NOT EXISTS idx_user_progress_user_id ON user_progress(user_id);
    CREATE INDEX IF NOT EXISTS idx_user_progress_workout_id ON user_progress(workout_id);
    CREATE INDEX IF NOT EXISTS idx_user_progress_date ON user_progress(date);

    -- Insert default user if not exists
    INSERT INTO users (email, name) 
    VALUES ('user@example.com', 'Default User')
    ON CONFLICT (email) DO NOTHING;